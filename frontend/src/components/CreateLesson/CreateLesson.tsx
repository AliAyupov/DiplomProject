import React, { useState } from 'react';
import { DndProvider, useDrag, useDrop } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import ReactPlayer from 'react-player';

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
enum ItemType {
    BUTTON = 'button',
    TEXT = 'text',
    VIDEO = 'video',
    FILE = 'file',
    DESCRIPTION = 'description',
}

const CreateLesson = () => {
    const [lessonElements, setLessonElements] = useState<{ type: ItemType }[]>([]);
    
    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ —É—Ä–æ–∫–∞
    const LessonElement: React.FC<{ type: ItemType }> = ({ type }) => {
        const [videoLink, setVideoLink] = useState('');
        const [uploadedFile, setUploadedFile] = useState<File | null>(null);

        const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
            setVideoLink(e.target.value);
        };

        const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
            const files = event.target.files;
            if (files && files.length > 0) {
                setUploadedFile(files[0]);
            }
        };

        const [{ isOver }, drop] = useDrop({
            accept: [ItemType.BUTTON, ItemType.TEXT, ItemType.VIDEO, ItemType.FILE, ItemType.DESCRIPTION],
            drop: (item: any) => handleDrop(item),
            collect: (monitor) => ({
                isOver: !!monitor.isOver(),
            }),
        });

        const handleRemoveElement = () => {
            const newLessonElements = lessonElements.filter((element) => element.type !== type);
            setLessonElements(newLessonElements);
        };

        let content = null;
        switch (type) {
            case ItemType.BUTTON:
                content = (
                    <>
                        <input placeholder='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏' type='text' className="input-constructor" />
                        <input placeholder='–°—Å—ã–ª–∫–∞' type='text' className="input-link" />
                    </>
                );
                break;
            case ItemType.TEXT:
                content = (
                    <textarea
                        name="courseName"
                        className={`form-input-lesson form-input-up`}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫"
                        rows={3}
                    />
                );
                break;
            case ItemType.VIDEO:
                content = (
                    <>
                        <input
                            placeholder='–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ'
                            type='text'
                            className="input-constructor"
                            value={videoLink}
                            onChange={handleInputChange}
                        />
                        <ReactPlayer url={videoLink} controls={true} />
                    </>
                );
                break;
            case ItemType.FILE:
                content = (
                    <div className="file-upload-container">
                        <div className="file-container">
                            <input className="file-input-nove form-input-p " id="file-input" type="file" onChange={handleFileUpload} />
                            <label htmlFor="file-input" className="file-button">–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª</label>
                        </div>
                        {uploadedFile && (
                            <div className="file-info">
                                <p>–ò–º—è —Ñ–∞–π–ª–∞: {uploadedFile.name}</p>
                                <div className="file-actions">
                                    <button onClick={() => window.open(URL.createObjectURL(uploadedFile), '_blank')}>
                                        –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å
                                    </button>
                                    <a href={URL.createObjectURL(uploadedFile)} download={uploadedFile.name}>
                                        –°–∫–∞—á–∞—Ç—å
                                    </a>
                                </div>
                            </div>
                        )}
                    </div>
                );
                break;
            case ItemType.DESCRIPTION:
                content = (
                    <textarea
                        name="description"
                        className={`form-input-desctiption form-input-p form-input-desc`}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
                        rows={4}
                    />
                );
                break;
            default:
                content = null;
        }

        return (
            <div className="element-constructor">
                <div className='delete'>
                    <button className="btn btn-c btn-del" onClick={handleRemoveElement}>üóë</button>
                </div>
                <div ref={drop} className={`lesson-element ${isOver ? 'over' : ''}`}>
                    {content}
                </div>
            </div>
        );
    };

    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    const DraggableButton: React.FC<{ type: ItemType }> = ({ type }) => {
        const [, drag] = useDrag({
            type,
            item: { type },
            collect: (monitor) => ({
                isDragging: !!monitor.isDragging(),
            }),
        });

        const handleAddElement = () => {
            const newLessonElements = [...lessonElements, { type }];
            setLessonElements(newLessonElements);
        };

        return (
            <button onClick={handleAddElement} ref={drag} className={`draggable-item draggable-${type}`}>
                {type === ItemType.BUTTON ? (
                    <button className="button-constructor">–ö–Ω–æ–ø–∫–∞</button>
                ) : type === ItemType.TEXT ? (
                    <button className="button-constructor">–ó–∞–≥–æ–ª–æ–≤–æ–∫</button>
                ) : type === ItemType.VIDEO ? (
                    <button className="button-constructor">–í–∏–¥–µ–æ</button>
                ) : type === ItemType.DESCRIPTION? (
                    <button className="button-constructor">–û–ø–∏—Å–∞–Ω–∏–µ</button>
                ) : type === ItemType.FILE ? (
                    <button className="button-constructor">–§–∞–π–ª</button>
                ) : null}
            </button>
        );
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è —Å–±—Ä–æ—Å–∞
    const handleDrop = (item: any) => {
        if ([ItemType.BUTTON, ItemType.TEXT, ItemType.VIDEO, ItemType.FILE, ItemType.DESCRIPTION].includes(item.type)) {
            const newLessonElements = [...lessonElements, { type: item.type }];
            setLessonElements(newLessonElements);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–≤–µ—Ä—Ö
    const handleMoveUp = (index: number) => {
        if (index > 0) {
            const newLessonElements = [...lessonElements];
            [newLessonElements[index - 1], newLessonElements[index]] = [newLessonElements[index], newLessonElements[index - 1]];
            setLessonElements(newLessonElements);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–Ω–∏–∑
    const handleMoveDown = (index: number) => {
        if (index < lessonElements.length - 1) {
            const newLessonElements = [...lessonElements];
            [newLessonElements[index], newLessonElements[index + 1]] = [newLessonElements[index + 1], newLessonElements[index]];
            setLessonElements(newLessonElements);
        }
    };

    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ö–æ–ª—Å—Ç–∞ —É—Ä–æ–∫–∞
    const LessonCanvas: React.FC = () => {
        const [, drop] = useDrop({
            accept: [ItemType.BUTTON, ItemType.TEXT, ItemType.VIDEO, ItemType.FILE, ItemType.DESCRIPTION],
            drop: (item: any) => handleDrop(item),
            collect: (monitor) => ({
                isOver: !!monitor.isOver(),
            }),
        });

        return (
            <div className="lesson-canvas" ref={drop}>
                {lessonElements.map((element, index) => (
                    <div className="backgroud-element" key={index}>
                        <LessonElement type={element.type} />
                        <button className='btn-const' onClick={() => handleMoveUp(index)} disabled={index === 0}>
                            ‚Üë
                        </button>
                        <button className='btn-const' onClick={() => handleMoveDown(index)} disabled={index === lessonElements.length - 1}>
                            ‚Üì
                        </button>
                    </div>
                ))}
            </div>
        );
    };

    return (
        <DndProvider backend={HTML5Backend}>
            <div className="lesson-constructor">
                <div className="lesson-elements">
                    <DraggableButton type={ItemType.BUTTON} />
                    <DraggableButton type={ItemType.TEXT} />
                    <DraggableButton type={ItemType.VIDEO} />
                    <DraggableButton type={ItemType.FILE} />
                    <DraggableButton type={ItemType.DESCRIPTION} />
                </div>
                <LessonCanvas />
            </div>
        </DndProvider>
    );
};
export default CreateLesson;
